-dataset generating tensors
-pytorch classifier working
-Train 1/Train2 for classfier
-Training now returns weights and bias for hidden and output
 to use for comparison/ other nets
 test returns costs
-implemented auto associator
-analysis updated for classifier/auto

files to move over
  torch_net.py
  autonet.py
  train_net.py
  dataset.py
  analysis.py
  updates.txt
delete
  numpy_ffn
  pytorch_nets





  -------------------------------------
  -Autoassociator and classifier combined-> network.py
    note: train_item uses MSELoss() for autoassociator
                          MSELoss(reduction = none) for calculating
                           separate costs in classifier
  save hidden state
  implement single layer classifier



  todo:
  move load_states_file to SLN
  analysis/train net for SLN
